<?php

/**
 * @file
 * Hooks for node_layout module.
 */

/**
 * Implements hook_entity_info().
 */
function node_layout_entity_info() {
  $info['node_layout'] = array(
    'label' => t('Node Layout'),
    'base table' => 'node_layout',
    'entity class' => 'NodeLayoutEntity',
    'controller class' => 'NodeLayoutEntityController',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
    'uuid' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function node_layout_autoload_info() {
  return array(
    'NodeLayoutEntity' => 'src/entity/node_layout.entity.inc',
    'NodeLayoutEntityController' => 'src/entity/node_layout.entity.inc',
    'NodeLayoutEntityControllerInterface' => 'src/entity/node_layout.entity.inc',
  );
}

/**
 * Implements hook_menu().
 */
function node_layout_menu() {
  $items = array();

  $items['node/%/layout'] = array(
    'title' => 'Layout',
    'description' => 'Edit Node Layout',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_layout_edit_form'),
    'access arguments' => array('edit node layouts'),
    'file' => 'node_layout.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node_layout_titles/autocomplete'] = array(
    'page callback' => '_node_layout_title_autocomplete',
    'access arguments' => 'access content',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/express-layout'] = array(
    'title' => 'Node Layout Settings',
    'description' => 'Configuration options for the Node Layout module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_layout_settings_form'),
    'access arguments' => array('administer node layout'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'node_layout.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function node_layout_block_info() {
  $blocks = array();
  $regions = node_layout_get_active_regions();

  foreach ($regions as $region) {
    $blocks["node_layout_$region"] = array(
      'info' => "Node Layout Block: $region",
      'description' => t('The hierarchical list...'),
      //    'cache' => BACKDROP_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function node_layout_block_view($delta = '', $settings = array()) {

  $item = menu_get_item();
  if (strpos($delta, 'node_layout') !== -1 && $item['path'] === 'node/%') {
    $layout = _get_layout();

    if ($layout->regions) {
      switch ($delta) {
        case 'node_layout_header':
          $nid = explode('/', $layout->regions['header']['reference'])[1];
          if ($nid) {
            $block['content'] = node_view(node_load($nid));
            $block['subject'] = 'header block';
            return $block;
          }

          break;
        case 'node_layout_sidebar':
          $nid = explode('/', $layout->regions['sidebar']['reference'])[1];
          if ($nid) {
            $block['content'] = node_view(node_load($nid));
            $block['subject'] = 'sidebar block';
            return $block;
          }

          break;
        case 'node_layout_bottom':
          $nid = explode('/', $layout->regions['bottom']['reference'])[1];
          if ($nid) {
            $block['content'] = node_view(node_load($nid));
            $block['subject'] = 'bottom block';
            return $block;
          }

          break;
      }
    }
  }
}

/**
 * Gets the layout for the node in question.
 *
 * @return array|bool|mixed|null
 */
function _get_layout() {
  $layout = &backdrop_static(__FUNCTION__);

  if ($layout === NULL) {
    $node = menu_get_object('node');
    $layout = db_query('SELECT * FROM {node_layout} WHERE nid = :nid', array(':nid' => $node->nid))->fetch();
    $layout->regions = unserialize($layout->data);
  }

  return $layout;
}

/**
 * Gets active regions the layout tool can use.
 *
 * @return array
 */
function node_layout_get_active_regions(string $node_type) {
  // Get the node layout.
  $node_layout = layout_load('default');

  // Get the template associated with the node layout.
  // the template has the regions that can be selected.
  $template = layout_get_layout_template_info($node_layout->layout_template);
  $template_regions = $template['regions'];

  // Return regions available for node type.
  $node_types = array_filter(config_get('node_layout.settings', 'available_node_types'), function($type) {
    return $type !== 0;
  });

  $regions = [];

  if () {

  }

  return $regions;
}

function node_layout_get_available_node_types() {
  $config = config_get('node_layout.settings');
  return $config['available_node_types'];
}

function node_layout_get_template() {

}

/**
 * Return suggestions for path autocomplete.
 *
 * @param string $search
 *   The search result.
 */
function _node_layout_title_autocomplete($search) {
  $matches = array();

  // Query node table based on titles.
  $query = db_select('node', 'n');

  $results = $query->fields('n')
    ->fields('n', array('title'))
    ->condition('n.title', '%' . db_like($search) . '%', 'LIKE')
    ->range(0, 10)
    ->execute();

  // Add results to JSON output. "Node path" => "node type: node title (node ID)".
  foreach ($results as $result) {
    $matches['node/' . $result->nid] = check_plain($result->type . ': ' . $result->title . ' (' . $result->nid . ')');
  }

  backdrop_json_output($matches);
}
