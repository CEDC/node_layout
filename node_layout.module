<?php

/**
 * @file
 * Hooks for node_layout module.
 */

/**
 * Implements hook_entity_info().
 */
function node_layout_entity_info() {
  $info['node_layout'] = array(
    'label' => t('Node Layout'),
    'base table' => 'node_layout',
    'entity class' => 'NodeLayoutEntity',
    'controller class' => 'NodeLayoutEntityController',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
    'uuid' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function node_layout_autoload_info() {
  return array(
    'NodeLayoutEntity' => 'src/entity/node_layout.entity.inc',
    'NodeLayoutEntityController' => 'src/entity/node_layout.entity.inc',
    'NodeLayoutEntityControllerInterface' => 'src/entity/node_layout.entity.inc',
  );
}

/**
 * Implements hook_menu().
 */
function node_layout_menu() {
  $items = array();

  $items['node/%/layout'] = array(
    'title' => 'Layout',
    'description' => 'Edit Node Layout',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_layout_edit_form'),
    //    'access arguments' => array('edit node layouts'),
    'access callback' => 'node_layout_edit_access_callback',
    'file' => 'node_layout.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['api/node_layouts'] = array(
    'page callback' => '_node_layouts_listing',
    'access arguments' => 'access content',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/node-layout'] = array(
    'title' => 'Node Layout Settings',
    'description' => 'Configuration options for the Node Layout module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_layout_settings_form'),
    'access arguments' => array('administer node layout'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'node_layout.admin.inc',
  );

  $items['admin/blocks/add'] = array(
    'title' => 'Add Block',
    'page callback' => 'et_add_page',
    'file' => 'node_layout.pages.inc',
    'access arguments' => array('administer node layout'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Need to add each hidden path content type to show up on add block page.
  foreach (node_type_get_types() as $type) {

    // If the hidden path setting is falsey, then don't add a menu item.
    if (!$type->settings['hidden_path']) {
      continue;
    }

    // This is taken from the node module's code for node/add/* meu paths.
    $type_url_str = str_replace('_', '-', $type->type);
    $items['admin/blocks/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'node_add',
      'page arguments' => array($type->type),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'description' => $type->description,
      'file' => 'node.pages.inc',
      'file path' => backdrop_get_path('module', 'node'),
    );
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function node_layout_theme($existing, $type, $theme, $path) {
    return array(
      'node_layout_edit_layout' => array(
        'variables' => array('data' => NULL),
        'template' => 'templates/edit_layout'
      ),
    );
}

/**
 * Implements hook_block_info().
 */
function node_layout_block_info() {
  $blocks = array();

  // Combine arrays of regions so that as long as one node layout uses it, the
  // region is included.
  $regions = node_layout_get_active_regions();

  foreach ($regions as $region) {
    $blocks["node_layout_$region"] = array(
      'info' => "Node Layout Block: $region",
      'description' => t("Layout block used for $region region."),
      // @todo Add caching strategy.
      // 'cache' => BACKDROP_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function node_layout_block_view($delta = '', $settings = array()) {
  
  if (strpos(current_path(), '/admin/blocks/add')) {
    return;
  }

  // @todo Add better check for exclusion so that future calls won't run through
  // the logic if it is determined the layout isn't needed for the current route.
  $item = menu_get_item();
  if (strpos($delta, 'node_layout') !== -1 && $item['path'] === 'node/%') {
    $block['content'] = NULL;
    $node = menu_get_object('node');
    $layout = node_layout_get_layout($node->nid);

    if ($layout) {
      $region_name = explode('node_layout_', $delta)[1];
      $data = unserialize($layout->data);
      foreach ($data->regions->$region_name->references as $reference) {
        if ($reference->nid) {
          $block['content'][] = node_view(node_load($reference->nid));
        }
      }

      return $block;
    }
  }
}

/**
 * Gets the layout for the node in question.
 *
 * @return array|bool|mixed|null
 */
// @todo Refactor so that this function returns a node_layout entity.
function node_layout_get_layout($nid) {
  $layout = &backdrop_static(__FUNCTION__);

  if ($layout === NULL) {
    $layout_id = db_query('SELECT id FROM {node_layout} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
//    $layout->regions = unserialize($layout->data);
    if ($layout_id) {
      $layout = entity_load('node_layout', $layout_id);
    } else {
//      $values = array();
//      $values['nid'] = $nid;
//      $values['data'] = $submitted_layout;
//      $layout = entity_create('node_layout', $values);
      $layout = false;
    }

  }

  return $layout;
}

/**
 * Gets active regions the layout tool can use.
 *
 * @param string $node_type
 *
 * @return array
 */
function node_layout_get_active_regions(string $node_type = '') {
  $config = config_get('node_layout.settings');

  // Get the node layout.
  // @todo Add to settings page.
//  $node_layout = layout_load($config['active_layout']);

  if ($node_type === '') {
    $node_types = array_filter(array_values(node_layout_get_available_node_types()), function($value) {
      return $value !== 0;
    });
  } else {
    $node_types = array($node_type);
  }

  $regions = array();
  foreach ($node_types as $type) {
    // @todo Don't merge arrays in a loop.
    $regions = array_merge($config[$type. '_regions'], $regions);
  }

  return array_filter($regions, function ($region) {
    return $region !== 0;
  });
}

/**
 * Returns whether or not the node type can use the layout tool.
 *
 * @param string $type
 *
 * @return bool|null
 */
function node_layout_is_type_available($type = '') {
  if ($type === '') {
    return NULL;
  }

  return in_array($type, array_values(node_layout_get_available_node_types()), TRUE);
}

/**
 * Returns an array of the node types that can use the layout tool.
 *
 * @return mixed
 */
function node_layout_get_available_node_types() {
  $config = config_get('node_layout.settings');
  return $config['available_node_types'];
}

/**
 * Returns a list of all nodes with type of hidden path.
 */
function _node_layouts_listing() {
  // Get query parameters.
  $q = backdrop_get_query_parameters();

  $nids = null;
  if (isset($q['nids'])) {
    $nids = json_decode($q['nids']);
  }

  // Query node table based on hidden path settings.
  $enabled_types = array_filter(node_type_get_types(), function($val) {
    return $val->settings['hidden_path'];
  });

  $types_names = array_map(function($val) {
    return $val->type;
  }, $enabled_types);

  if ($nids) {
    $results = db_query('SELECT nid, title, type FROM {node} WHERE type IN (:types) AND nid IN (:ids)',
      array(':types' => $types_names, ':ids' => $nids))->fetchAll();
  } else {
    $results = db_query('SELECT nid, title, type FROM {node} WHERE type IN (:types)',
      array(':types' => $types_names))->fetchAll();
  }

  backdrop_json_output(json_encode($results));
  exit();
}

/**
 * Implements hook_admin_paths().
 */
function node_layout_admin_paths() {
//  return array(
//    'node/*/layout' => TRUE,
//    'admin/blocks/add' => TRUE,
//    'admin/blocks/add/*' => TRUE,
//  );
}
